When would you want to create a remote repository rather than keeping all your work local?
Answer: Seems like a useful way to collaborate. Useful as a backup of all work.

Why might you want to always pull changes manually rather than having Git automatically stay up-to-date with your remote repository?
Answer: While developing an application by modifying open source code from GitHub, you might not always want the new changes to the actual source code. Another situation is that the new code can cause bugs in your application. The best way IMO to handle this is for Git to notify the user if there was any change in the remote and have the user/developer go over the changes manually and see if they're required for their project.

Describe the differences between forks, clones, and branches. When would you use one instead of another?
Fork acts only between two GitHub repositories. It's a way to copy contents from online repositories into your GitHub repository. You can now make changes to your own copy. The presence of fork also means that you are at least "citing" the original author. Remote is created automatically.
Answer: Clone works on any two repositories local or remote.
Branches operate on repositories. Used to make experimental changes or to work on a particular feature without disturbing the "master" or production code.

What is the benefit of having a copy of the last known state of the remote stored locally?
Answer: To know if we are up-to-date or how far ahead or behind we are (locally) compared to the last known remote. Going back online we can see if we are diverging from the remote as well. 

How would you collaborate without using Git or GitHub? What would be easier, and what would be harder?
Answer: It would be harder to make merges. Working without branches would mean one would have multiple copies of a file when changes are made. Having a common cloud copy also makes things easier.

When would you want to make changes in a separate branch rather than directly in master? What benefits does each approach have?
Answer: When there is a complete new feature or if I'm working on an experimental piece, I would want a new branch so as to not make any changes in master. The process of merging becomes "slightly more complex" or rather indirect but it is intuitive considering you won't be the only one working on a large project. In this case having multiple people work and merge into master or take another branch to update some feature in their branch makes more sense.