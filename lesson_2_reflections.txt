What happens when you initialize a repository? Why do you need to do it?
Answer: creates .git file. 

How is the staging area different from the working directory and the repository?
Answer: Acts a medium in between the two letting users add files to this space and making a single commit of the area to a repository.

What value do you think it offers?

How can you use the staging area to make sure you have one commit per logical change?
Answer: Add files (depending the logical change made) to staging area first, then make the commit.

What are some situations when branches would be helpful in keeping your history organized? How would branches help?
Answer: Like the tutorial mentioned, making experimental changes is the best reason I can think of.

How do the diagrams help you visualize the branch structure?
Answer: Tells us what is reachable from a current branch and at which points new branches were created. Using log can make this possible.

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?
Answer: Merges the logical changes (additions and deletions) in both branches and makes it a commit of the branch that is currently checked out. Running git log --graph --oneline master after the merge shows the merge in the way it was shown in class. It makes it easier to keep track of a commit and it's parents.

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?
Answer: Git trying to merge two versions of a automatically can cause errors and bugs if there are logical changes to the same part of the code. It makes more sense if git automatically merges commits that make changes to independent parts of the program. Conflicts are posed when the above logical changes in the code happens at which time it is up to the user to manually make the required changes.